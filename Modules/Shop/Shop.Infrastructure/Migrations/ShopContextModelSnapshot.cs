// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Shop.Infrastructure;

#nullable disable

namespace Shop.Infrastructure.Migrations
{
    [DbContext(typeof(ShopContext))]
    partial class ShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shop.Domain.Entities.BasketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Basket", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.BasketItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("BasketId", "ProductId")
                        .IsUnique();

                    b.ToTable("BasketItem", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(100);

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.CategoryTranslationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnOrder(50);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(51);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId", "Lang")
                        .IsUnique();

                    b.ToTable("CategoryTranslation", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductBaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductBase", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnOrder(103);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(101);

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnOrder(102);

                    b.Property<Guid>("ProductBaseId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("ProductBaseId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductParameterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnOrder(101);

                    b.Property<Guid>("ProductBaseId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("ProductBaseId");

                    b.ToTable("ProductParameter", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductParameterTranslationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnOrder(50);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid>("ProductParameterId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(51);

                    b.HasKey("Id");

                    b.HasIndex("ProductParameterId", "Lang")
                        .IsUnique();

                    b.ToTable("ProductParameterTranslation", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductParameterValueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<Guid>("ProductParameterId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnOrder(102);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductParameterId");

                    b.ToTable("ProductParameterValue", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductPhotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(101);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnOrder(102);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.HasIndex("ProductId", "Position")
                        .IsUnique();

                    b.ToTable("ProductPhoto", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductTranslationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnOrder(50);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnOrder(51);

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Lang")
                        .IsUnique();

                    b.ToTable("ProductTranslation", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.PurchaseListEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("boolean")
                        .HasColumnOrder(102);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnOrder(101);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.ToTable("PurchaseList", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.PurchaseListItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("ModifyTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(101);

                    b.Property<Guid>("PurchaseListId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseListId");

                    b.ToTable("PurchaseListItem", (string)null);
                });

            modelBuilder.Entity("Shop.Domain.Entities.BasketItemEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.BasketEntity", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Domain.Entities.ProductEntity", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Domain.Entities.CategoryEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.CategoryEntity", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Shop.Domain.Entities.CategoryTranslationEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.CategoryEntity", "Category")
                        .WithMany("Translations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductBaseEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.CategoryEntity", "Category")
                        .WithMany("ProductBases")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.ProductBaseEntity", "ProductBase")
                        .WithMany("Products")
                        .HasForeignKey("ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBase");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductParameterEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.ProductBaseEntity", "ProductBase")
                        .WithMany("ProductParameters")
                        .HasForeignKey("ProductBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBase");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductParameterTranslationEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.ProductParameterEntity", "ProductParameter")
                        .WithMany("Translations")
                        .HasForeignKey("ProductParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductParameter");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductParameterValueEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.ProductEntity", "Product")
                        .WithMany("ProductParameterValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Domain.Entities.ProductParameterEntity", "ProductParameter")
                        .WithMany()
                        .HasForeignKey("ProductParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductParameter");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductPhotoEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.ProductEntity", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductTranslationEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.ProductEntity", "Product")
                        .WithMany("Translations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Domain.Entities.PurchaseListItemEntity", b =>
                {
                    b.HasOne("Shop.Domain.Entities.ProductEntity", "Product")
                        .WithMany("PurchaseListItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Domain.Entities.PurchaseListEntity", "PurchaseList")
                        .WithMany("PurchaseListItems")
                        .HasForeignKey("PurchaseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseList");
                });

            modelBuilder.Entity("Shop.Domain.Entities.BasketEntity", b =>
                {
                    b.Navigation("BasketItems");
                });

            modelBuilder.Entity("Shop.Domain.Entities.CategoryEntity", b =>
                {
                    b.Navigation("ProductBases");

                    b.Navigation("SubCategories");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductBaseEntity", b =>
                {
                    b.Navigation("ProductParameters");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductEntity", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("ProductParameterValues");

                    b.Navigation("ProductPhotos");

                    b.Navigation("PurchaseListItems");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Shop.Domain.Entities.ProductParameterEntity", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Shop.Domain.Entities.PurchaseListEntity", b =>
                {
                    b.Navigation("PurchaseListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
